import { Component, OnInit, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import {
  ButtonModule,
  CardModule,
  FormModule,
  CollapseModule,
  ModalModule,
  ButtonGroupModule,
  ColComponent,
  RowComponent, ContainerComponent
} from '@coreui/angular';
import {
  cilChevronBottom,
  cilChevronRight,
  cilFolderOpen,
  cilFolder,
  cilPencil,
  cilCheck,
  cilX,
  cilPlus,
  cilTrash
} from '@coreui/icons';
import { BookingApiService } from '../../../bookings/services/booking-api.service';
import { IconComponent } from '@coreui/icons-angular';
import { BadgeComponent } from '../../../../shared/components/badge/badge.component';
import {TranslatePipe} from '@ngx-translate/core';

export interface LedgerGroupInterface {
  id: string;
  name: string;
  parent?: LedgerGroupInterface;
  description: string;
  enabled: boolean;
}

interface ModalData {
  id: string;
  name: string;
  description: string;
  isSubgroup: boolean;
  enabled: boolean
}

interface NewGroupData {
  name: string;
  description: string;
  enabled: boolean
}

@Component({
  selector: 'app-ledger-groups',
  standalone: true,
  imports: [
    RowComponent,
    ColComponent,
    CommonModule,
    FormsModule,
    ButtonModule,
    CardModule,
    FormModule,
    CollapseModule,
    ModalModule,
    ButtonGroupModule,
    IconComponent,
    BadgeComponent,
    TranslatePipe,
    ContainerComponent
  ],
  templateUrl: './ledger-groups.component.html',
  styleUrls: ['./ledger-groups.component.scss']
})
export class LedgerGroupsComponent implements OnInit {

  ledgerGroups: LedgerGroupInterface[] = [];
  expandedGroups: Set<string> = new Set([]);

  // Modal states
  editModalVisible: boolean = false;
  addGroupModalVisible: boolean = false;
  addSubgroupModalVisible: boolean = false;

  // Modal data
  modalData: ModalData = { id: '', name: '', description: '', isSubgroup: false, enabled: true };
  newGroupData: NewGroupData = { name: '', description: '', enabled: true };
  newSubgroupData: NewGroupData = { name: '', description: '', enabled: true };
  selectedParentGroup: LedgerGroupInterface | null = null;

  icons = {
    cilChevronBottom,
    cilChevronRight,
    cilFolderOpen,
    cilFolder,
    cilPencil,
    cilCheck,
    cilX,
    cilPlus,
    cilTrash,
  };

  constructor(private bookingService: BookingApiService) {
  }

  ngOnInit(): void {
    this.initializeLedgerData();
  }

  private initializeLedgerData(): void {
    const assets: LedgerGroupInterface = {
      id: '1',
      name: 'Assets',
      description: 'Resources owned by the business',
      enabled: true
    };

    const liabilities: LedgerGroupInterface = {
      id: '2',
      name: 'Liabilities',
      description: 'Debts and obligations owed by the business',
      enabled: true
    };

    const equity: LedgerGroupInterface = {
      id: '3',
      name: 'Equity',
      description: 'Owner\'s stake in the business',
      enabled: true
    };

    const income: LedgerGroupInterface = {
      id: '4',
      name: 'Income',
      description: 'Revenue generated by the business',
      enabled: true
    };

    const expenses: LedgerGroupInterface = {
      id: '5',
      name: 'Expenses',
      description: 'Costs incurred in business operations',
      enabled: true
    };

    const subgroups: LedgerGroupInterface[] = [
      { id: '11', name: 'Current Assets', parent: assets, description: 'Assets convertible to cash within one year', enabled: true },
      { id: '12', name: 'Fixed Assets', parent: assets, description: 'Long-term tangible assets', enabled: true },
      { id: '13', name: 'Intangible Assets', parent: assets, description: 'Non-physical assets with value', enabled: true },
      { id: '14', name: 'Other Assets', parent: assets, description: 'Miscellaneous assets', enabled: true },

      { id: '21', name: 'Current Liabilities', parent: liabilities, description: 'Short-term debts due within one year', enabled: true },
      { id: '22', name: 'Long-term Liabilities', parent: liabilities, description: 'Debts due after one year', enabled: true },
      { id: '23', name: 'Contingent Liabilities', parent: liabilities, description: 'Potential obligations', enabled: true },

      { id: '31', name: 'Owner\'s Equity', parent: equity, description: 'Initial capital and additional investments', enabled: true },
      { id: '32', name: 'Retained Earnings', parent: equity, description: 'Accumulated profits kept in business', enabled: true },
      { id: '33', name: 'Current Year Earnings', parent: equity, description: 'Profit/loss for current period', enabled: true },

      { id: '41', name: 'Operating Income', parent: income, description: 'Revenue from core business operations', enabled: true },
      { id: '42', name: 'Non-Operating Income', parent: income, description: 'Revenue from secondary activities', enabled: true },
      { id: '43', name: 'Other Income', parent: income, description: 'Miscellaneous revenue sources', enabled: true },

      { id: '51', name: 'Operating Expenses', parent: expenses, description: 'Regular business operation costs', enabled: true },
      { id: '52', name: 'Non-Operating Expenses', parent: expenses, description: 'Costs not related to core operations', enabled: true },
      { id: '53', name: 'Administrative Expenses', parent: expenses, description: 'General management and office costs', enabled: true },
      { id: '54', name: 'Cost of Goods Sold', parent: expenses, description: 'Direct costs of producing goods/services', enabled: false }
    ];

    this.ledgerGroups = [assets, liabilities, equity, income, expenses, ...subgroups];
  }

  getMainGroups(): LedgerGroupInterface[] {
    return this.ledgerGroups.filter(group => !group.parent);
  }

  getSubgroups(parentId: string): LedgerGroupInterface[] {
    return this.ledgerGroups.filter(group => group.parent?.id === parentId);
  }

  isExpanded(groupId: string): boolean {
    return this.expandedGroups.has(groupId);
  }

  toggleExpansion(groupId: string): void {
    if (this.expandedGroups.has(groupId)) {
      this.expandedGroups.delete(groupId);
    } else {
      this.expandedGroups.add(groupId);
    }

  }

  // Modal Methods
  openEditModal(group: LedgerGroupInterface): void {
    this.modalData = {
      id: group.id,
      name: group.name,
      description: group.description,
      isSubgroup: !!group.parent,
      enabled: group.enabled
    };
    this.editModalVisible = true;
  }

  closeEditModal(): void {
    this.editModalVisible = false;
    this.resetModalData();
  }

  saveEditModal(): void {
    if (this.modalData.name.trim() && this.modalData.description.trim()) {
      const item = this.ledgerGroups.find(g => g.id === this.modalData.id);
      if (item) {
        item.name = this.modalData.name.trim();
        item.description = this.modalData.description.trim();
        item.enabled= this.modalData.enabled
      }
      this.closeEditModal();
    }
  }

  openAddGroupModal(): void {
    this.newGroupData = { name: '', description: '' , enabled: true};
    this.addGroupModalVisible = true;
  }

  closeAddGroupModal(): void {
    this.addGroupModalVisible = false;
    this.newGroupData = { name: '', description: '' , enabled: true};
  }

  saveAddGroupModal(): void {
    if (this.newGroupData.name.trim() ) {
      const newId = (Math.max(...this.ledgerGroups.map(g => parseInt(g.id))) + 1).toString();
      const newGroup: LedgerGroupInterface = {
        id: newId,
        name: this.newGroupData.name.trim(),
        description: this.newGroupData.description.trim(),
        enabled: this.newGroupData.enabled
      };
      this.ledgerGroups.push(newGroup);
      this.closeAddGroupModal();
    }
  }

  openAddSubgroupModal(parentGroup: LedgerGroupInterface): void {
    this.selectedParentGroup = parentGroup;
    this.newSubgroupData = { name: '', description: '', enabled: true };
    this.addSubgroupModalVisible = true;
  }

  closeAddSubgroupModal(): void {
    this.addSubgroupModalVisible = false;
    this.newSubgroupData = { name: '', description: '', enabled: true };
    this.selectedParentGroup = null;
  }

  saveAddSubgroupModal(): void {
    if (this.newSubgroupData.name.trim() &&
        this.selectedParentGroup) {

      const newId = (Math.max(...this.ledgerGroups.map(g => parseInt(g.id))) + 1).toString();
      const newSubgroup: LedgerGroupInterface = {
        id: newId,
        name: this.newSubgroupData.name.trim(),
        parent: this.selectedParentGroup,
        description: this.newSubgroupData.description.trim(),
        enabled: this.newSubgroupData.enabled
      };

      this.ledgerGroups.push(newSubgroup);
      this.expandedGroups.add(this.selectedParentGroup.id);
      this.closeAddSubgroupModal();
    }
  }

  private resetModalData(): void {
    this.modalData = { id: '', name: '', description: '', isSubgroup: false, enabled: true };
  }

  deleteGroup(groupId: string): void {
    const groupToDelete = this.ledgerGroups.find(g => g.id === groupId);
    if (groupToDelete) {
      this.ledgerGroups = this.ledgerGroups.filter(g =>
        g.id !== groupId && g.parent?.id !== groupId
      );
    }
  }
  expandAll(){
    const tmpSet: Set<string> = new Set([]);
    for(let group of this.ledgerGroups){
      if(!group.parent){
        tmpSet.add(group.id)
      }
    }
    this.expandedGroups = new Set<string>(tmpSet)
  }
}
